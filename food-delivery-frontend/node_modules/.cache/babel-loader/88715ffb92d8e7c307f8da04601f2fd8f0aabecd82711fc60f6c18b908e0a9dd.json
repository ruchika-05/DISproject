{"ast":null,"code":"const handlePlaceOrder = async () => {\n  if (!isAuthenticated) {\n    alert(\"You need to log in to place an order.\");\n    return;\n  }\n  const userId = localStorage.getItem(\"userId\");\n  if (!userId || cart.length === 0 || !cart[0].restaurant_id) {\n    alert(\"Missing user, cart items, or restaurant.\");\n    return;\n  }\n\n  // ðŸ§  Debug log to see what's going on\n  console.log(\"ðŸ§¾ Placing order with:\", {\n    user_id: userId,\n    restaurant_id: cart[0].restaurant_id,\n    items: cart.map(item => item.dish_name)\n  });\n  try {\n    const response = await fetch(\"http://localhost:5000/orders\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_id: userId,\n        restaurant_id: cart[0].restaurant_id,\n        items: cart.map(item => item.dish_name)\n      })\n    });\n    const result = await response.json();\n    if (response.ok) {\n      alert(\"Order placed successfully!\");\n      setCart([]);\n    } else {\n      alert(\"Failed to place order: \" + result.error);\n    }\n  } catch (error) {\n    console.error(\"Order error:\", error);\n    alert(\"Error placing order.\");\n  }\n};","map":{"version":3,"names":["handlePlaceOrder","isAuthenticated","alert","userId","localStorage","getItem","cart","length","restaurant_id","console","log","user_id","items","map","item","dish_name","response","fetch","method","headers","body","JSON","stringify","result","json","ok","setCart","error"],"sources":["C:/Users/ruchi/DISproject/food-delivery-frontend/src/components/Cart.js"],"sourcesContent":["const handlePlaceOrder = async () => {\r\n  if (!isAuthenticated) {\r\n    alert(\"You need to log in to place an order.\");\r\n    return;\r\n  }\r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  if (!userId || cart.length === 0 || !cart[0].restaurant_id) {\r\n    alert(\"Missing user, cart items, or restaurant.\");\r\n    return;\r\n  }\r\n\r\n  // ðŸ§  Debug log to see what's going on\r\n  console.log(\"ðŸ§¾ Placing order with:\", {\r\n    user_id: userId,\r\n    restaurant_id: cart[0].restaurant_id,\r\n    items: cart.map((item) => item.dish_name),\r\n  });\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/orders\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        user_id: userId,\r\n        restaurant_id: cart[0].restaurant_id,\r\n        items: cart.map((item) => item.dish_name),\r\n      }),\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (response.ok) {\r\n      alert(\"Order placed successfully!\");\r\n      setCart([]);\r\n    } else {\r\n      alert(\"Failed to place order: \" + result.error);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Order error:\", error);\r\n    alert(\"Error placing order.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI,CAACC,eAAe,EAAE;IACpBC,KAAK,CAAC,uCAAuC,CAAC;IAC9C;EACF;EAEA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAE7C,IAAI,CAACF,MAAM,IAAIG,IAAI,CAACC,MAAM,KAAK,CAAC,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,CAACE,aAAa,EAAE;IAC1DN,KAAK,CAAC,0CAA0C,CAAC;IACjD;EACF;;EAEA;EACAO,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;IACpCC,OAAO,EAAER,MAAM;IACfK,aAAa,EAAEF,IAAI,CAAC,CAAC,CAAC,CAACE,aAAa;IACpCI,KAAK,EAAEN,IAAI,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,SAAS;EAC1C,CAAC,CAAC;EAEF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBX,OAAO,EAAER,MAAM;QACfK,aAAa,EAAEF,IAAI,CAAC,CAAC,CAAC,CAACE,aAAa;QACpCI,KAAK,EAAEN,IAAI,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,SAAS;MAC1C,CAAC;IACH,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAEpC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACfvB,KAAK,CAAC,4BAA4B,CAAC;MACnCwB,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,MAAM;MACLxB,KAAK,CAAC,yBAAyB,GAAGqB,MAAM,CAACI,KAAK,CAAC;IACjD;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdlB,OAAO,CAACkB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpCzB,KAAK,CAAC,sBAAsB,CAAC;EAC/B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}